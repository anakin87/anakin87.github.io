<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="https://anakin87.github.io/feed_style.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <tabi:metadata xmlns:tabi="https://github.com/welpo/tabi">
        <tabi:base_url>https:&#x2F;&#x2F;anakin87.github.io&#x2F;</tabi:base_url>
        <tabi:separator>
            •
        </tabi:separator>
        <tabi:about_feeds>This is a web feed, also known as an Atom feed. Subscribe by copying the URL from the address bar into your newsreader. Visit About Feeds to learn more and get started. It&#x27;s free.</tabi:about_feeds>
        <tabi:visit_the_site>Visit website</tabi:visit_the_site>
        <tabi:recent_posts>Recent posts</tabi:recent_posts>
        <tabi:last_updated_on>Updated on $DATE</tabi:last_updated_on>
        <tabi:default_theme></tabi:default_theme>
        <tabi:post_listing_date>date</tabi:post_listing_date>
        <tabi:current_section>prompt engineering</tabi:current_section>
    </tabi:metadata><link rel="extra-stylesheet" href="https://anakin87.github.io/skins/indigo_ingot.css?h=d429472afbb246441b1a" /><title>~/anakin87 - prompt engineering</title>
        <subtitle>Personal website of Stefano Fiorucci, AI&#x2F;NLP&#x2F;Software Engineer.</subtitle>
    <link href="https://anakin87.github.io/tags/prompt-engineering/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://anakin87.github.io/tags/prompt-engineering/" rel="alternate" type="text/html"/>
    <generator uri="https://www.getzola.org/">Zola</generator><updated>2024-10-31T00:00:00+00:00</updated><id>https://anakin87.github.io/tags/prompt-engineering/atom.xml</id><entry xml:lang="en">
        <title>👩‍🏫 Banks (Python library): a Swiss Army Knife for prompting	</title>
        <published>2024-10-31T00:00:00+00:00</published>
        <updated>2024-10-31T00:00:00+00:00</updated>
        <author>
            <name>Stefano Fiorucci</name>
        </author>
        <link rel="alternate" href="https://anakin87.github.io/blog/banks/" type="text/html"/>
        <id>https://anakin87.github.io/blog/banks/</id>
        
            <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;anakin87.github.io&#x2F;blog&#x2F;banks&#x2F;banks.gif&quot; alt=&quot;Banks&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When you start building with Language Models, it’s likely you’ll play around with various prompts before achieving your goal.&lt;&#x2F;p&gt;
&lt;p&gt;Soon, you realize you need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Templating to include dynamic elements in your prompts.&lt;&#x2F;li&gt;
&lt;li&gt;Versioning and storing prompts - to avoid losing the results of your experiments.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That’s where &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;masci&#x2F;banks&quot;&gt;&lt;em&gt;Banks&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; comes in.&lt;&#x2F;p&gt;
&lt;p&gt;My friend Massimiliano Pippi developed this lightweight Python library based on Jinja2.&lt;&#x2F;p&gt;
&lt;p&gt;It’s named after Louise Banks, the character portrayed by Amy Adams in Arrival, who is enlisted by the United States Army to communicate with extraterrestrials.&lt;&#x2F;p&gt;
&lt;p&gt;Banks focuses on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;📙 Templating for text and chat messages&lt;&#x2F;li&gt;
&lt;li&gt;🎟️ Prompt Versioning&lt;&#x2F;li&gt;
&lt;li&gt;🗄️ Prompt Management&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once you start exploring it, you’ll discover several bonus 𝐟𝐞𝐚𝐭𝐮𝐫𝐞𝐬:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;✨ LM-assisted prompt creation&lt;&#x2F;li&gt;
&lt;li&gt;🔧 tool calling directly from the prompt&lt;&#x2F;li&gt;
&lt;li&gt;💾 prompt caching&lt;&#x2F;li&gt;
&lt;li&gt;🚅 LiteLLM (YC W23) support&lt;&#x2F;li&gt;
&lt;li&gt;〰️ Async support&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;⭐⭐ Give &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;masci&#x2F;banks&quot;&gt;Banks&lt;&#x2F;a&gt; a star! ⭐⭐&lt;&#x2F;p&gt;
&lt;p&gt;(This is not a sponsored post, Banks is MIT, and at best, I’ll earn a beer for it 😊)&lt;&#x2F;p&gt;
</content>
        </entry><entry xml:lang="en">
        <title>⚙️ Prompt Optimization with Haystack + DSPy</title>
        <published>2024-06-05T00:00:00+00:00</published>
        <updated>2024-06-05T00:00:00+00:00</updated>
        <author>
            <name>Stefano Fiorucci</name>
        </author>
        <link rel="alternate" href="https://anakin87.github.io/blog/haystack-dspy/" type="text/html"/>
        <id>https://anakin87.github.io/blog/haystack-dspy/</id>
        
            <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;anakin87.github.io&#x2F;blog&#x2F;haystack-dspy&#x2F;haystack_dspy.jpeg&quot; alt=&quot;Haystack + DSPy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When building applications with LLMs, writing effective prompts is a long process of trial and error. 🔄&lt;&#x2F;p&gt;
&lt;p&gt;Often, if you switch models, you also have to change the prompt. 😩&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;What if you could automate this process?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;💡 That’s where DSPy comes in - a framework designed to algorithmically optimize prompts for Language Models.&lt;&#x2F;p&gt;
&lt;p&gt;By applying classical machine learning concepts (training and evaluation data, metrics, optimization), DSPy generates better prompts for a given model and task.&lt;&#x2F;p&gt;
&lt;p&gt;Recently, I explored combining DSPy with the robustness of Haystack Pipelines.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Check out the &lt;a class=&quot;external&quot; href=&quot;https:&#x2F;&#x2F;haystack.deepset.ai&#x2F;cookbook&#x2F;prompt_optimization_with_dspy&quot;&gt;🧪📓 experimental notebook&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here’s how it works:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;▶️ Start from a Haystack RAG pipeline with a basic prompt&lt;&#x2F;li&gt;
&lt;li&gt;🎯 Define a goal (in this case, get correct and concise answers)&lt;&#x2F;li&gt;
&lt;li&gt;📊 Create a DSPy program, define data and metrics&lt;&#x2F;li&gt;
&lt;li&gt;✨ Optimize and evaluate -&amp;gt; improved prompt&lt;&#x2F;li&gt;
&lt;li&gt;🚀 Build a refined Haystack RAG pipeline using the optimized prompt&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        <summary type="html">Automate prompt engineering with DSPy and Haystack.</summary>
        </entry>
</feed>
